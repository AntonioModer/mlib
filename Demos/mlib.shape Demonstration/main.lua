-- Require libraries. local mlib = require 'mlib'function love.load()	mlib.shape.remove()	local Width, Height = love.window.getDimensions()	Shapes = {}	-- Make information for circle. 	local R1 = love.math.random( 5, 20 )	Circle_1 = mlib.shape.new( love.math.random( R1, Width - R1 ), love.math.random( R1, Height - R1 ), R1 )	Circle_1.Color = { 255, 255, 255, 255 } -- Make a custom value to indicate if Circle_1 have intersected. 	Circle_1.BaseColor = { 255, 255, 255, 255 }	Circle_1.HitColor = { 255, 0, 0, 255 }	Circle_1.Offset_x, Circle_1.Offset_y = 0, 0	Circle_1.Mode = 'line'	Circle_1.Selected = false		local R2 = love.math.random( 5, 20 )	Circle_2 = mlib.shape.new( love.math.random( R2, Width - R2 ), love.math.random( R2, Height - R2 ), R2 )	Circle_2.Color = { 255, 255, 255, 255 } -- Make a custom value to indicate if Circle_2 have intersected. 	Circle_2.BaseColor = { 255, 255, 255, 255 }	Circle_2.HitColor = { 255, 0, 0, 255 }	Circle_2.Offset_x, Circle_2.Offset_y = 0, 0	Circle_2.Mode = 'line'	Circle_2.Selected = false		-- Make information for the line-segment. 	Line_1 = mlib.shape.new( love.math.random( 0, Width ), love.math.random( 0, Height ), love.math.random( 0, Width ), love.math.random( 0, Height ) )	Line_1.Color = { 255, 255, 255, 255 } -- Make a custom value to indicate if Line_1 has intersected. 	Line_1.BaseColor = { 255, 255, 255, 255 }	Line_1.Offset_x, Line_1.Offset_y = 0, 0	Line_1.HitColor = { 255, 0, 0, 255 } 	Line_1.Selected = false -- There isn't a draw mode, for line, so it's not needed.		Line_2 = mlib.shape.new( love.math.random( 0, Width ), love.math.random( 0, Height ), love.math.random( 0, Width ), love.math.random( 0, Height ) )	Line_2.Color = { 255, 255, 255, 255 } -- Make a custom value to indicate if Line_2 has intersected. 	Line_2.BaseColor = { 255, 255, 255, 255 }	Line_2.Offset_x, Line_2.Offset_y = 0, 0	Line_2.HitColor = { 255, 0, 0, 255 } 	Line_2.Selected = false -- There isn't a draw mode, for line, so it's not needed.		-- Make information for the polygon	Polygon_1 = mlib.shape.new( 349, 226, 249, 226, 249, 326, 349, 326 )	Polygon_1.Color = { 255, 255, 255, 255 }	Polygon_1.BaseColor = { 255, 255, 255, 255 }	Polygon_1.HitColor = { 255, 0, 0, 255 }	Polygon_1.Mode = 'line'	Polygon_1.Selected = false		Polygon_2 = mlib.shape.new( 500, 300, 550, 300, 550, 350, 500, 350 )	Polygon_2.Color = { 255, 255, 255, 255 }	Polygon_2.BaseColor = { 255, 255, 255, 255 }	Polygon_2.HitColor = { 255, 0, 0, 255 }	Polygon_2.Mode = 'line'	Polygon_2.Selected = false		Shapes = { Circle_1, Circle_2, Line_1, Line_2, Polygon_1, Polygon_2 }endfunction love.draw()	x, y = love.mouse.getX(), love.mouse.getY()		love.graphics.setColor( 0, 255, 0, 255 )	love.graphics.print( 'Circle_1:', 0, 0 )	love.graphics.print( '     Circle_1 x: ' .. Circle_1.x, 0, 12 )	love.graphics.print( '     Circle_1 y: ' .. Circle_1.y, 0, 24 )	love.graphics.print( '     Circle_1 Radius: ' .. Circle_1.radius, 0, 36 )	love.graphics.print( '     Circle_1 Collided: ' .. tostring( Circle_1.collided ), 0, 48 ) 		love.graphics.print( 'Line_1:', 0, 60 )	love.graphics.print( '     Line_1 x1: ' .. Line_1.x1, 0, 72 )	love.graphics.print( '     Line_1 y1: ' .. Line_1.y1, 0, 84 )	love.graphics.print( '     Line_1 x2: ' .. Line_1.x2, 0, 96 )	love.graphics.print( '     Line_1 y2: ' .. Line_1.y2, 0, 108 )	love.graphics.print( '     Line_1 Collided: ' .. tostring( Line_1.collided ), 0, 120 ) 		love.graphics.print( 'Polygon_1:', 0, 132 )	love.graphics.print( '     Polygon_1 x1: ' .. Polygon_1.points[1], 0, 144 )	love.graphics.print( '     Polygon_1 y1: ' .. Polygon_1.points[2], 0, 156 )	love.graphics.print( '     Polygon_1 x2: ' .. Polygon_1.points[3], 0, 168 )	love.graphics.print( '     Polygon_1 y2: ' .. Polygon_1.points[4], 0, 180 )	love.graphics.print( '     Polygon_1 x3: ' .. Polygon_1.points[5], 0, 192 )	love.graphics.print( '     Polygon_1 y3: ' .. Polygon_1.points[6], 0, 204 )	love.graphics.print( '     Polygon_1 x4: ' .. Polygon_1.points[7], 0, 216 )	love.graphics.print( '     Polygon_1 y4: ' .. Polygon_1.points[8], 0, 228 )	love.graphics.print( '     Polygon_1 Collided: ' .. tostring( Polygon_1.collided ), 0, 240 ) 		love.graphics.setColor( 0, 255, 0, 255 )	love.graphics.print( 'Circle_2:', 0, 268 )	love.graphics.print( '     Circle_2 x: ' .. Circle_2.x, 0, 280 )	love.graphics.print( '     Circle_2 y: ' .. Circle_2.y, 0, 292 )	love.graphics.print( '     Circle_2 Radius: ' .. Circle_2.radius, 0, 304 )	love.graphics.print( '     Circle_2 Collided: ' .. tostring( Circle_2.collided ), 0, 316 ) 		love.graphics.print( 'Line_2:', 0, 328 )	love.graphics.print( '     Line_2 x1: ' .. Line_2.x1, 0, 340 )	love.graphics.print( '     Line_2 y1: ' .. Line_2.y1, 0, 352 )	love.graphics.print( '     Line_2 x2: ' .. Line_2.x2, 0, 364 )	love.graphics.print( '     Line_2 y2: ' .. Line_2.y2, 0, 376 )	love.graphics.print( '     Line_2 Collided: ' .. tostring( Line_2.collided ), 0, 388 ) 		love.graphics.print( 'Polygon_2:', 0, 400 )	love.graphics.print( '     Polygon_2 x1: ' .. Polygon_2.points[1], 0, 412 )	love.graphics.print( '     Polygon_2 y1: ' .. Polygon_2.points[2], 0, 424 )	love.graphics.print( '     Polygon_2 x2: ' .. Polygon_2.points[3], 0, 436 )	love.graphics.print( '     Polygon_2 y2: ' .. Polygon_2.points[4], 0, 448 )	love.graphics.print( '     Polygon_2 x3: ' .. Polygon_2.points[5], 0, 460 )	love.graphics.print( '     Polygon_2 y3: ' .. Polygon_2.points[6], 0, 472 )	love.graphics.print( '     Polygon_2 x4: ' .. Polygon_2.points[7], 0, 484 )	love.graphics.print( '     Polygon_2 y4: ' .. Polygon_2.points[8], 0, 496 )	love.graphics.print( '     Polygon_2 Collided: ' .. tostring( Polygon_2.collided ), 0, 508 ) 		love.graphics.print( 'Mouse x: '..x..', Mouse y: '..y, 0, 536 )		for a = 1, #Shapes do		love.graphics.setColor( Shapes[a].Color )				if Shapes[a].type == 'circle' then			if mlib.circle.inCircle( Shapes[a].x, Shapes[a].y, Shapes[a].radius, x, y ) then Shapes[a].Mode = 'fill' else Shapes[a].Mode = 'line' end			love.graphics.circle( Shapes[a].Mode, Shapes[a].x, Shapes[a].y, Shapes[a].radius )		elseif Shapes[a].type == 'line' then			love.graphics.line( Shapes[a].x1, Shapes[a].y1, Shapes[a].x2, Shapes[a].y2 )		elseif Shapes[a].type == 'polygon' then 			if mlib.polygon.checkPoint( x, y, Shapes[a].points ) then Shapes[a].Mode = 'fill' else Shapes[a].Mode = 'line' end			love.graphics.polygon( Shapes[a].Mode, Shapes[a].points )		end	endendfunction love.update( dt )	local x, y = love.mouse.getX(), love.mouse.getY()			mlib.shape.checkCollisions()		for a = 1, #Shapes do		if Shapes[a].Selected then			if Shapes[a].type == 'circle' then				Shapes[a].x = x + Shapes[a].Offset_x				Shapes[a].y = y + Shapes[a].Offset_y			elseif Shapes[a].type == 'polygon' then				for e = 1, #Shapes[a].points, 2 do					Shapes[a].points[e] = x + Shapes[a].Offsets[e]					Shapes[a].points[e + 1] = y + Shapes[a].Offsets[e + 1]				end			elseif Shapes[a].type == 'line' then				Shapes[a].x1 = x + Shapes[a].Offsets[1]				Shapes[a].y1 = y + Shapes[a].Offsets[2]				Shapes[a].x2 = x + Shapes[a].Offsets[3]				Shapes[a].y2 = y + Shapes[a].Offsets[4]			end		end			if Shapes[a].collided then			Shapes[a].Color = Shapes[a].HitColor 		else			Shapes[a].Color = Shapes[a].BaseColor		end	endendfunction love.mousepressed( x, y, button )	for a = 1, #Shapes do		if Shapes[a].type == 'circle' then			local Circle = Shapes[a]			if mlib.circle.inCircle( Circle.x, Circle.y, Circle.radius, x, y ) then 				Circle.Selected = true				Circle.Offset_x = Circle.x - x				Circle.Offset_y = Circle.y - y			end		elseif Shapes[a].type == 'polygon' then			local Polygon = Shapes[a]			if mlib.polygon.checkPoint( x, y, Polygon.points ) then				Polygon.Selected = true				local Offsets = {}				for e = 1, #Polygon.points, 2 do					table.insert( Offsets, Polygon.points[e] - x )					table.insert( Offsets, Polygon.points[e + 1] - y )				end				Polygon.Offsets = Offsets			end		elseif Shapes[a].type == 'line' then			local Line = Shapes[a]			if mlib.line.segment.checkPoint( Line.x1, Line.y1, Line.x2, Line.y2, x, y ) then				Line.Selected = true				local Offsets = {}				table.insert( Offsets, Line.x1 - x )				table.insert( Offsets, Line.y1 - y )				table.insert( Offsets, Line.x2 - x )				table.insert( Offsets, Line.y2 - y )				Line.Offsets = Offsets			end		end	endendfunction love.mousereleased( x, y, button )	for a = 1, #Shapes do		Shapes[a].Selected = false	endendfunction love.keypressed( key )	if key == 'escape' then love.event.quit() end	love.load()end